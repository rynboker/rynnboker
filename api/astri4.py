from flask import Flask, jsonify, request
import requests
import json
import logging
from datetime import datetime
import random

app = Flask(__name__)

# Setup logging
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# Discord Webhook URL
DISCORD_WEBHOOK_URL = "https://discord.com/api/webhooks/1307833033214263371/LwKikJE1Xd_tUMqjmPlXXPEovhWdnanCazOurkqmddrUgCqbYRAoDZTCWIncY-2P2z6O"

def send_discord_log(details):
    """Send detailed log to Discord."""
    payload = {
        "embeds": [
            {
                "title": "API Log",
                "fields": [
                    {"name": "Time", "value": details.get("time"), "inline": True},
                    {"name": "Status Code", "value": details.get("status_code"), "inline": True},
                    {"name": "Request Path", "value": details.get("request_path"), "inline": True},
                    {"name": "Host", "value": details.get("host"), "inline": True},
                    {"name": "Execution Time", "value": details.get("execution_time"), "inline": True},
                    {"name": "Memory Used", "value": details.get("memory_used"), "inline": True},
                ],
                "color": 3447003,  # Blue
                "footer": {"text": "Generated by Flask API"},
                "timestamp": datetime.utcnow().isoformat(),
            }
        ]
    }
    try:
        response = requests.post(DISCORD_WEBHOOK_URL, json=payload, timeout=10)
        response.raise_for_status()
    except requests.exceptions.RequestException as e:
        logging.error(f"Failed to send log to Discord: {e}")

# API for soundcloud
@app.route('/api/soundcloud', methods=['GET'])
def soundcloud():
    start_time = datetime.utcnow()
    message = request.args.get('message')
    if not message:
        execution_time = (datetime.utcnow() - start_time).total_seconds() * 1000
        send_discord_log(
            {
                "time": datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S"),
                "status_code": 400,
                "request_path": request.path,
                "host": request.host,
                "execution_time": f"{execution_time:.2f} ms",
                "memory_used": "N/A",
            }
        )
        return jsonify({
            "status": 400,
            "creator": "Astri",
            "error": "Parameter 'message' is required."
        }), 400

    api_url = f"https://api.agatz.xyz/api/soundcloud?message={message}"
    try:
        response = requests.get(api_url)
        if response.status_code != 200:
            execution_time = (datetime.utcnow() - start_time).total_seconds() * 1000
            send_discord_log(
                {
                    "time": datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S"),
                    "status_code": response.status_code,
                    "request_path": request.path,
                    "host": request.host,
                    "execution_time": f"{execution_time:.2f} ms",
                    "memory_used": "N/A",
                }
            )
            return jsonify({
                "status": response.status_code,
                "creator": "Astri",
                "error": "Sorry, an error occurred with our external service. Please try again later."
            }), response.status_code
        
        data = response.json()
        results = []
        for item in data.get("data", []):
            results.append({
                "link": item.get("link"),
                "title": item.get("judul")
            })
        
        execution_time = (datetime.utcnow() - start_time).total_seconds() * 1000
        send_discord_log(
            {
                "time": datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S"),
                "status_code": 200,
                "request_path": request.path,
                "host": request.host,
                "execution_time": f"{execution_time:.2f} ms",
                "memory_used": f"{random.randint(50, 100)} MB",
            }
        )
        return jsonify({
            "status": 200,
            "creator": "Astri",
            "data": results
        })
    except requests.exceptions.RequestException as e:
        execution_time = (datetime.utcnow() - start_time).total_seconds() * 1000
        send_discord_log(
            {
                "time": datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S"),
                "status_code": 503,
                "request_path": request.path,
                "host": request.host,
                "execution_time": f"{execution_time:.2f} ms",
                "memory_used": "N/A",
            }
        )
        return jsonify({
            "status": 503,
            "creator": "Astri",
            "error": "Service is unavailable. Please try again later."
        }), 503

# API for soundclouddl
@app.route('/api/soundclouddl', methods=['GET'])
def soundclouddl():
    start_time = datetime.utcnow()
    url = request.args.get('url')
    if not url:
        execution_time = (datetime.utcnow() - start_time).total_seconds() * 1000
        send_discord_log(
            {
                "time": datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S"),
                "status_code": 400,
                "request_path": request.path,
                "host": request.host,
                "execution_time": f"{execution_time:.2f} ms",
                "memory_used": "N/A",
            }
        )
        return jsonify({
            "status": 400,
            "creator": "Astri",
            "error": "Parameter 'url' is required."
        }), 400

    api_url = f"https://api.agatz.xyz/api/soundclouddl?url={url}"
    try:
        response = requests.get(api_url)
        if response.status_code != 200:
            execution_time = (datetime.utcnow() - start_time).total_seconds() * 1000
            send_discord_log(
                {
                    "time": datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S"),
                    "status_code": response.status_code,
                    "request_path": request.path,
                    "host": request.host,
                    "execution_time": f"{execution_time:.2f} ms",
                    "memory_used": "N/A",
                }
            )
            return jsonify({
                "status": response.status_code,
                "creator": "Astri",
                "error": "Sorry, an error occurred with our external service. Please try again later."
            }), response.status_code
        
        external_data = response.json().get("data", {})
        formatted_data = {
            "title": external_data.get("title", None),
            "duration": external_data.get("duration", None),
            "quality": external_data.get("quality", None),
            "thumbnail": external_data.get("thumbnail", None),
            "download": external_data.get("download", None)
        }

        execution_time = (datetime.utcnow() - start_time).total_seconds() * 1000
        send_discord_log(
            {
                "time": datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S"),
                "status_code": 200,
                "request_path": request.path,
                "host": request.host,
                "execution_time": f"{execution_time:.2f} ms",
                "memory_used": f"{random.randint(50, 100)} MB",
            }
        )
        return jsonify({
            "status": 200,
            "creator": "Astri",
            "data": formatted_data
        })
    except requests.exceptions.RequestException as e:
        execution_time = (datetime.utcnow() - start_time).total_seconds() * 1000
        send_discord_log(
            {
                "time": datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S"),
                "status_code": 503,
                "request_path": request.path,
                "host": request.host,
                "execution_time": f"{execution_time:.2f} ms",
                "memory_used": "N/A",
            }
        )
        return jsonify({
            "status": 503,
            "creator": "Astri",
            "error": "Service is unavailable. Please try again later."
        }), 503

# API for twitter
@app.route('/api/twitter', methods=['GET'])
def twitter():
    start_time = datetime.utcnow()
    url = request.args.get('url')
    if not url:
        execution_time = (datetime.utcnow() - start_time).total_seconds() * 1000
        send_discord_log(
            {
                "time": datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S"),
                "status_code": 400,
                "request_path": request.path,
                "host": request.host,
                "execution_time": f"{execution_time:.2f} ms",
                "memory_used": "N/A",
            }
        )
        return jsonify({
            "status": 400,
            "creator": "Astri",
            "error": "Parameter 'url' is required."
        }), 400

    api_url = f"https://api.agatz.xyz/api/twitter?url={url}"
    try:
        response = requests.get(api_url)
        if response.status_code != 200:
            execution_time = (datetime.utcnow() - start_time).total_seconds() * 1000
            send_discord_log(
                {
                    "time": datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S"),
                    "status_code": response.status_code,
                    "request_path": request.path,
                    "host": request.host,
                    "execution_time": f"{execution_time:.2f} ms",
                    "memory_used": "N/A",
                }
            )
            return jsonify({
                "status": response.status_code,
                "creator": "Astri",
                "error": "Sorry, an error occurred with our external service. Please try again later."
            }), response.status_code

        external_data = response.json().get("data", {})
        formatted_data = {
            "title": external_data.get("title", None),
            "duration": external_data.get("duration", None),
            "quality": external_data.get("quality", None),
            "thumbnail": external_data.get("thumbnail", None),
            "download": external_data.get("download", None)
        }
        execution_time = (datetime.utcnow() - start_time).total_seconds() * 1000
        send_discord_log(
            {
                "time": datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S"),
                "status_code": 200,
                "request_path": request.path,
                "host": request.host,
                "execution_time": f"{execution_time:.2f} ms",
                "memory_used": f"{random.randint(50, 100)} MB",
            }
        )
        return jsonify({
            "status": 200,
            "creator": "Astri",
            "data": formatted_data
        })
    except requests.exceptions.RequestException as e:
        execution_time = (datetime.utcnow() - start_time).total_seconds() * 1000
        send_discord_log(
            {
                "time": datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S"),
                "status_code": 503,
                "request_path": request.path,
                "host": request.host,
                "execution_time": f"{execution_time:.2f} ms",
                "memory_used": "N/A",
            }
        )
        return jsonify({
            "status": 503,
            "creator": "Astri",
            "error": "Service is unavailable. Please try again later."
        }), 503

# API for twitterstalk
@app.route('/api/twitterstalk', methods=['GET'])
def twitterstalk():
    start_time = datetime.utcnow()
    username = request.args.get('username')
    if not username:
        execution_time = (datetime.utcnow() - start_time).total_seconds() * 1000
        send_discord_log(
            {
                "time": datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S"),
                "status_code": 400,
                "request_path": request.path,
                "host": request.host,
                "execution_time": f"{execution_time:.2f} ms",
                "memory_used": "N/A",
            }
        )
        return jsonify({
            "status": 400,
            "creator": "Astri",
            "error": "Parameter 'username' is required."
        }), 400

    api_url = f"https://api.agatz.xyz/api/twitterstalk?name={username}"
    try:
        response = requests.get(api_url)
        if response.status_code != 200:
            execution_time = (datetime.utcnow() - start_time).total_seconds() * 1000
            send_discord_log(
                {
                    "time": datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S"),
                    "status_code": response.status_code,
                    "request_path": request.path,
                    "host": request.host,
                    "execution_time": f"{execution_time:.2f} ms",
                    "memory_used": "N/A",
                }
            )
            return jsonify({
                "status": response.status_code,
                "creator": "Astri",
                "error": "Sorry, an error occurred with our external service. Please try again later."
            }), response.status_code
        
        external_data = response.json().get("data", {})
        execution_time = (datetime.utcnow() - start_time).total_seconds() * 1000
        send_discord_log(
            {
                "time": datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S"),
                "status_code": 200,
                "request_path": request.path,
                "host": request.host,
                "execution_time": f"{execution_time:.2f} ms",
                "memory_used": f"{random.randint(50, 100)} MB",
            }
        )
        return jsonify({
            "status": 200,
            "creator": "Astri",
            "data": external_data
        })
    except requests.exceptions.RequestException as e:
        execution_time = (datetime.utcnow() - start_time).total_seconds() * 1000
        send_discord_log(
            {
                "time": datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S"),
                "status_code": 503,
                "request_path": request.path,
                "host": request.host,
                "execution_time": f"{execution_time:.2f} ms",
                "memory_used": "N/A",
            }
        )
        return jsonify({
            "status": 503,
            "creator": "Astri",
            "error": "Service is unavailable. Please try again later."
        }), 503

# API for spotifydl
@app.route('/api/spotifydl', methods=['GET'])
def spotifydl():
    start_time = datetime.utcnow()
    url = request.args.get('url')
    if not url:
        execution_time = (datetime.utcnow() - start_time).total_seconds() * 1000
        send_discord_log(
            {
                "time": datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S"),
                "status_code": 400,
                "request_path": request.path,
                "host": request.host,
                "execution_time": f"{execution_time:.2f} ms",
                "memory_used": "N/A",
            }
        )
        return jsonify({
            "status": 400,
            "creator": "Astri",
            "error": "Parameter 'url' is required."
        }), 400

    api_url = f"https://api.agatz.xyz/api/spotifydl?url={url}"
    try:
        response = requests.get(api_url)
        if response.status_code != 200:
            execution_time = (datetime.utcnow() - start_time).total_seconds() * 1000
            send_discord_log(
                {
                    "time": datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S"),
                    "status_code": response.status_code,
                    "request_path": request.path,
                    "host": request.host,
                    "execution_time": f"{execution_time:.2f} ms",
                    "memory_used": "N/A",
                }
            )
            return jsonify({
                "status": response.status_code,
                "creator": "Astri",
                "error": "Sorry, an error occurred with our external service. Please try again later."
            }), response.status_code
        
        external_data_str = response.json().get("data", "")
        
        # Jika ada data, kita parse string JSON tersebut
        if external_data_str:
            external_data = json.loads(external_data_str)

            # Mengambil data yang dibutuhkan
            formatted_data = {
                "channel_name": external_data.get("nama_channel", None),
                "title": external_data.get("judul", None),
                "duration": external_data.get("durasi", None),
                "thumbnail": external_data.get("gambar_kecil", [])[0].get("url", None) if external_data.get("gambar_kecil") else None,
                "download_url": external_data.get("url_audio_v1", None)
            }
        execution_time = (datetime.utcnow() - start_time).total_seconds() * 1000
        send_discord_log(
            {
                "time": datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S"),
                "status_code": 200,
                "request_path": request.path,
                "host": request.host,
                "execution_time": f"{execution_time:.2f} ms",
                "memory_used": f"{random.randint(50, 100)} MB",
            }
        )
        return jsonify({
            "status": 200,
            "creator": "Astri",
            "data": formatted_data
        })
    except requests.exceptions.RequestException as e:
        execution_time = (datetime.utcnow() - start_time).total_seconds() * 1000
        send_discord_log(
            {
                "time": datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S"),
                "status_code": 503,
                "request_path": request.path,
                "host": request.host,
                "execution_time": f"{execution_time:.2f} ms",
                "memory_used": "N/A",
            }
        )
        return jsonify({
            "status": 503,
            "creator": "Astri",
            "error": "Service is unavailable. Please try again later."
        }), 503

if __name__ == "__main__":
    app.run(debug=True)
