from flask import Flask, jsonify, request
import requests
import logging
from datetime import datetime
import random

app = Flask(__name__)

# Setup logging
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# Discord Webhook URL
DISCORD_WEBHOOK_URL = "https://discord.com/api/webhooks/1307833033214263371/LwKikJE1Xd_tUMqjmPlXXPEovhWdnanCazOurkqmddrUgCqbYRAoDZTCWIncY-2P2z6O"


def send_discord_log(details):
    """Send detailed log to Discord."""
    payload = {
        "embeds": [
            {
                "title": "API Log",
                "fields": [
                    {"name": "Time", "value": details.get("time"), "inline": True},
                    {"name": "Status Code", "value": details.get("status_code"), "inline": True},
                    {"name": "Request Path", "value": details.get("request_path"), "inline": True},
                    {"name": "Host", "value": details.get("host"), "inline": True},
                    {"name": "Execution Time", "value": details.get("execution_time"), "inline": True},
                    {"name": "Memory Used", "value": details.get("memory_used"), "inline": True},
                ],
                "color": 3447003,  # Blue
                "footer": {"text": "Generated by Astri API"},
                "timestamp": datetime.utcnow().isoformat(),
            }
        ]
    }
    try:
        response = requests.post(DISCORD_WEBHOOK_URL, json=payload, timeout=10)
        response.raise_for_status()
    except requests.exceptions.RequestException as e:
        logging.error(f"Failed to send log to Discord: {e}")


# API for weather
@app.route('/api/weather', methods=['GET'])
def weather():
    start_time = datetime.utcnow()

    # Extract query parameter
    message = request.args.get("message")
    if not message or message.strip() == "":
        error_message = "Parameter 'message' is required and cannot be empty."
        send_discord_log(
            {
                "time": datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S"),
                "status_code": 400,
                "request_path": request.path,
                "host": request.host,
                "execution_time": "0 ms",
                "memory_used": "N/A",
            }
        )
        return jsonify({"status": 400, "creator": "Astri", "error": error_message}), 400

    api_url = f"https://api.agatz.xyz/api/cuaca?message={message}"
    try:
        response = requests.get(api_url, timeout=10)
        response.raise_for_status()
        external_data = response.json()

        memory_used = f"{random.randint(50, 100)} MB"

        execution_time = (datetime.utcnow() - start_time).total_seconds() * 1000
        data = response.json()

        # Send detailed log to Discord
        send_discord_log(
            {
                "time": datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S"),
                "status_code": response.status_code,
                "request_path": request.path,
                "host": request.host,
                "execution_time": f"{execution_time:.2f} ms",
                "memory_used": memory_used,# Replace with dynamic calculation if needed
            }
        )

        return jsonify({"status": 200, "creator": "Astri", "data": external_data["data"]})

    except requests.exceptions.Timeout:
        execution_time = (datetime.utcnow() - start_time).total_seconds() * 1000
        send_discord_log(
            {
                "time": datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S"),
                "status_code": 504,
                "request_path": request.path,
                "host": request.host,
                "execution_time": f"{execution_time:.2f} ms",
                "memory_used": "N/A",
            }
        )
        return jsonify({"status": 504, "creator": "Astri", "error": "Request timed out"}), 504

    except requests.exceptions.RequestException as e:
        execution_time = (datetime.utcnow() - start_time).total_seconds() * 1000
        send_discord_log(
            {
                "time": datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S"),
                "status_code": 503,
                "request_path": request.path,
                "host": request.host,
                "execution_time": f"{execution_time:.2f} ms",
                "memory_used": "N/A",
            }
        )
        return jsonify({"status": 503, "creator": "Astri", "error": f"Service unavailable: {e}"}), 503


if __name__ == "__main__":
    app.run(debug=True, host="0.0.0.0", port=5000)
