import os
from flask import Flask, jsonify, request, send_from_directory
import requests
from pathlib import Path

app = Flask(__name__)

# Setup logging
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# Discord Webhook URL
DISCORD_WEBHOOK_URL = "https://discord.com/api/webhooks/1307833033214263371/LwKikJE1Xd_tUMqjmPlXXPEovhWdnanCazOurkqmddrUgCqbYRAoDZTCWIncY-2P2z6O"


def send_discord_log(details):
    """Send detailed log to Discord."""
    payload = {
        "embeds": [
            {
                "title": "API Log",
                "fields": [
                    {"name": "Time", "value": details.get("time"), "inline": True},
                    {"name": "Status Code", "value": details.get("status_code"), "inline": True},
                    {"name": "Request Path", "value": details.get("request_path"), "inline": True},
                    {"name": "Host", "value": details.get("host"), "inline": True},
                    {"name": "Execution Time", "value": details.get("execution_time"), "inline": True},
                    {"name": "Memory Used", "value": details.get("memory_used"), "inline": True},
                ],
                "color": 3447003,  # Blue
                "footer": {"text": "Generated by Astri API"},
                "timestamp": datetime.utcnow().isoformat(),
            }
        ]
    }
    try:
        response = requests.post(DISCORD_WEBHOOK_URL, json=payload, timeout=10)
        response.raise_for_status()
    except requests.exceptions.RequestException as e:
        logging.error(f"Failed to send log to Discord: {e}")

# Use /tmp directory on Vercel for storing images (Writable directory)
PUBLIC_IMAGE_DIR = '/tmp'

# Ensure the temporary directory exists
Path(PUBLIC_IMAGE_DIR).mkdir(parents=True, exist_ok=True)

# Function to download and save image
def download_and_save_image(image_url, filename):
    try:
        img_response = requests.get(image_url, stream=True)
        if img_response.status_code != 200:
            raise Exception("Failed to download image")
        
        img_path = os.path.join(PUBLIC_IMAGE_DIR, filename)
        with open(img_path, 'wb') as img_file:
            for chunk in img_response.iter_content(1024):
                img_file.write(chunk)
        
        return img_path
    except Exception as e:
        return None

# Endpoint 1: Welcome Image Generator
@app.route('/api/welcome', methods=['GET'])
def welcome():
    img1 = request.args.get('img1')
    img2 = request.args.get('img2')
    background = request.args.get('background')
    username = request.args.get('username')
    member = request.args.get('member')
    groupname = request.args.get('groupname')

    if not img1 or not img2 or not background or not username or not member or not groupname:
        send_discord_log(
            {
                "time": datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S"),
                "status_code": 400,
                "request_path": request.path,
                "host": request.host,
                "execution_time": "0 ms",
                "memory_used": "N/A",
            }
        )
        return jsonify({"error": "Missing required parameters", "status": 400})

    # Construct the URL and generate the image (In this case, simply download the welcome image)
    url = f"https://api.lolhuman.xyz/api/base/welcome?apikey=59485720964df592a349c173&img1={img1}&img2={img2}&background={background}&username={username}&member={member}&groupname={groupname}"
    
    memory_used = f"{random.randint(50, 100)} MB"
    execution_time = (datetime.utcnow() - start_time).total_seconds() * 1000

    img_path = download_and_save_image(url, "welcome_image.jpg")
    if not img_path:
        return jsonify({"error": "Failed to generate image", "status": 500})
    
    # Send detailed log to Discord
    send_discord_log(
            {
                "time": datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S"),
                "status_code": response.status_code,
                "request_path": request.path,
                "host": request.host,
                "execution_time": f"{execution_time:.2f} ms",
                "memory_used": memory_used,# Replace with dynamic calculation if needed
            }
        )

    return jsonify({
        "status": 200,
        "image_url": f"/api/image/{os.path.basename(img_path)}"
    })

# Endpoint 2: KTP Maker Image Generator
@app.route('/api/ktp', methods=['GET'])
def ktp():
    nik = request.args.get('nik')
    prov = request.args.get('prov')
    kabu = request.args.get('kabu')
    name = request.args.get('name')
    ttl = request.args.get('ttl')
    jk = request.args.get('jk')
    jl = request.args.get('jl')
    rtrw = request.args.get('rtrw')
    lurah = request.args.get('lurah')
    camat = request.args.get('camat')
    agama = request.args.get('agama')
    nikah = request.args.get('nikah')
    kerja = request.args.get('kerja')
    warga = request.args.get('warga')
    until = request.args.get('until')
    img = request.args.get('img')

    if not nik or not prov or not kabu or not name or not ttl or not jk or not jl or not rtrw or not lurah or not camat or not agama or not nikah or not kerja or not warga or not until or not img:
        send_discord_log(
            {
                "time": datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S"),
                "status_code": 400,
                "request_path": request.path,
                "host": request.host,
                "execution_time": "0 ms",
                "memory_used": "N/A",
            }
        )
        return jsonify({"error": "Missing required parameters", "status": 400})

    url = f"https://api.lolhuman.xyz/api/ktpmaker?apikey=59485720964df592a349c173&nik={nik}&prov={prov}&kabu={kabu}&name={name}&ttl={ttl}&jk={jk}&jl={jl}&rtrw={rtrw}&lurah={lurah}&camat={camat}&agama={agama}&nikah={nikah}&kerja={kerja}&warga={warga}&until={until}&img={img}"
    
    memory_used = f"{random.randint(50, 100)} MB"
    execution_time = (datetime.utcnow() - start_time).total_seconds() * 1000
    
    img_path = download_and_save_image(url, "ktp_image.jpg")
    if not img_path:
        return jsonify({"error": "Failed to generate image", "status": 500})
    
    # Send detailed log to Discord
    send_discord_log(
            {
                "time": datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S"),
                "status_code": response.status_code,
                "request_path": request.path,
                "host": request.host,
                "execution_time": f"{execution_time:.2f} ms",
                "memory_used": memory_used,# Replace with dynamic calculation if needed
            }
        )

    return jsonify({
        "status": 200,
        "image_url": f"/api/image/{os.path.basename(img_path)}"
    })

# Endpoint 3: Rank Image Generator
@app.route('/api/rank', methods=['GET'])
def rank():
    img = request.args.get('img')
    background = request.args.get('background')
    username = request.args.get('username')
    level = request.args.get('level')
    ranking = request.args.get('ranking')
    currxp = request.args.get('currxp')
    xpneed = request.args.get('xpneed')

    if not img or not background or not username or not level or not ranking or not currxp or not xpneed:
        send_discord_log(
            {
                "time": datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S"),
                "status_code": 400,
                "request_path": request.path,
                "host": request.host,
                "execution_time": "0 ms",
                "memory_used": "N/A",
            }
        )
        return jsonify({"error": "Missing required parameters", "status": 400})

    url = f"https://api.lolhuman.xyz/api/rank?apikey=59485720964df592a349c173&img={img}&background={background}&username={username}&level={level}&ranking={ranking}&currxp={currxp}&xpneed={xpneed}"
    
    memory_used = f"{random.randint(50, 100)} MB"
    execution_time = (datetime.utcnow() - start_time).total_seconds() * 1000
    
    img_path = download_and_save_image(url, "rank_image.jpg")
    if not img_path:
        return jsonify({"error": "Failed to generate image", "status": 500})
    
    # Send detailed log to Discord
    send_discord_log(
            {
                "time": datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S"),
                "status_code": response.status_code,
                "request_path": request.path,
                "host": request.host,
                "execution_time": f"{execution_time:.2f} ms",
                "memory_used": memory_used,# Replace with dynamic calculation if needed
            }
        )

    return jsonify({
        "status": 200,
        "image_url": f"/api/image/{os.path.basename(img_path)}"
    })

# Endpoint 4: Leave Image Generator
@app.route('/api/leave', methods=['GET'])
def leave():
    img1 = request.args.get('img1')
    img2 = request.args.get('img2')
    background = request.args.get('background')
    username = request.args.get('username')
    member = request.args.get('member')
    groupname = request.args.get('groupname')

    if not img1 or not img2 or not background or not username or not member or not groupname:
        send_discord_log(
            {
                "time": datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S"),
                "status_code": 400,
                "request_path": request.path,
                "host": request.host,
                "execution_time": "0 ms",
                "memory_used": "N/A",
            }
        )
        return jsonify({"error": "Missing required parameters", "status": 400})

    url = f"https://api.lolhuman.xyz/api/base/leave?apikey=59485720964df592a349c173&img1={img1}&img2={img2}&background={background}&username={username}&member={member}&groupname={groupname}"
    
    memory_used = f"{random.randint(50, 100)} MB"
    execution_time = (datetime.utcnow() - start_time).total_seconds() * 1000
    
    img_path = download_and_save_image(url, "leave_image.jpg")
    if not img_path:
        return jsonify({"error": "Failed to generate image", "status": 500})
    
    # Send detailed log to Discord
    send_discord_log(
            {
                "time": datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S"),
                "status_code": response.status_code,
                "request_path": request.path,
                "host": request.host,
                "execution_time": f"{execution_time:.2f} ms",
                "memory_used": memory_used,# Replace with dynamic calculation if needed
            }
        )

    return jsonify({
        "status": 200,
        "image_url": f"/api/image/{os.path.basename(img_path)}"
    })

# Endpoint 5: QR Code Image Generator
@app.route('/api/qrcode', methods=['GET'])
def qrcode():
    text = request.args.get('text')

    if not text:
        send_discord_log(
            {
                "time": datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S"),
                "status_code": 400,
                "request_path": request.path,
                "host": request.host,
                "execution_time": "0 ms",
                "memory_used": "N/A",
            }
        )
        return jsonify({"error": "Missing required parameters", "status": 400})

    url = f"https://api.lolhuman.xyz/api/qrcode?apikey=59485720964df592a349c173&text={text}"
    
    memory_used = f"{random.randint(50, 100)} MB"
    execution_time = (datetime.utcnow() - start_time).total_seconds() * 1000
    
    img_path = download_and_save_image(url, "qrcode_image.jpg")
    if not img_path:
        send_discord_log(
            {
                "time": datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S"),
                "status_code": 400,
                "request_path": request.path,
                "host": request.host,
                "execution_time": "0 ms",
                "memory_used": "N/A",
            }
        )
        return jsonify({"error": "Failed to generate image", "status": 500})
    
    # Send detailed log to Discord
    send_discord_log(
            {
                "time": datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S"),
                "status_code": response.status_code,
                "request_path": request.path,
                "host": request.host,
                "execution_time": f"{execution_time:.2f} ms",
                "memory_used": memory_used,# Replace with dynamic calculation if needed
            }
        )

    return jsonify({
        "status": 200,
        "image_url": f"/api/image/{os.path.basename(img_path)}"
    })

# Endpoint 6: Diffusion Prompt Image Generator
@app.route('/api/diffusion', methods=['GET'])
def diffusion():
    prompt = request.args.get('prompt')

    if not prompt:
        send_discord_log(
            {
                "time": datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S"),
                "status_code": 400,
                "request_path": request.path,
                "host": request.host,
                "execution_time": "0 ms",
                "memory_used": "N/A",
            }
        )
        return jsonify({"error": "Missing required parameters", "status": 400})

    url = f"https://api.lolhuman.xyz/api/diffusion-prompt?apikey=59485720964df592a349c173&prompt={prompt}"
    
    memory_used = f"{random.randint(50, 100)} MB"
    execution_time = (datetime.utcnow() - start_time).total_seconds() * 1000
    
    img_path = download_and_save_image(url, "diffusion_image.jpg")
    if not img_path:
        send_discord_log(
            {
                "time": datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S"),
                "status_code": 400,
                "request_path": request.path,
                "host": request.host,
                "execution_time": "0 ms",
                "memory_used": "N/A",
            }
        )
        return jsonify({"error": "Failed to generate image", "status": 500})
    
    # Send detailed log to Discord
    send_discord_log(
            {
                "time": datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S"),
                "status_code": response.status_code,
                "request_path": request.path,
                "host": request.host,
                "execution_time": f"{execution_time:.2f} ms",
                "memory_used": memory_used,# Replace with dynamic calculation if needed
            }
        )

    return jsonify({
        "status": 200,
        "image_url": f"/api/image/{os.path.basename(img_path)}"
    })

# Serve image from temporary directory
@app.route('/api/image/<filename>', methods=['GET'])
def serve_image(filename):
    try:

    memory_used = f"{random.randint(50, 100)} MB"
    execution_time = (datetime.utcnow() - start_time).total_seconds() * 1000
    
        # Validate filename
        if ".." in filename or "/" in filename:
            send_discord_log(
            {
                "time": datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S"),
                "status_code": 400,
                "request_path": request.path,
                "host": request.host,
                "execution_time": "0 ms",
                "memory_used": "N/A",
            }
        )
            return jsonify({"error": "Invalid filename", "status": 400}), 400

        image_path = os.path.join(PUBLIC_IMAGE_DIR, filename)
        if os.path.exists(image_path):
            return send_from_directory(PUBLIC_IMAGE_DIR, filename)
    
    # Send detailed log to Discord
    send_discord_log(
            {
                "time": datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S"),
                "status_code": response.status_code,
                "request_path": request.path,
                "host": request.host,
                "execution_time": f"{execution_time:.2f} ms",
                "memory_used": memory_used,# Replace with dynamic calculation if needed
            }
        )

        else:
            return jsonify({"error": "File not found", "status": 404}), 404

    except Exception as e:
        return jsonify({"error": f"Unexpected error occurred: {str(e)}", "status": 500}), 500


if __name__ == '__main__':
    app.run(debug=True)
